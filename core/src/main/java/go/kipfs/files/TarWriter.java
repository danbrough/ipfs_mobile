// Code generated by gobind. DO NOT EDIT.

// Java class go.kipfs.files.TarWriter is a proxy for talking to a Go program.
//
//   autogenerated by gobind -lang=java -javapkg=go.kipfs github.com/ipfs/go-ipfs-files
//go:build  linux || windows 
//+build linux, windows 
package go.kipfs.files;

import go.Seq;

public final class TarWriter implements Seq.Proxy {
	static { Files.touch(); }
	
	private final int refnum;
	
	@Override public final int incRefnum() {
	      Seq.incGoRef(refnum, this);
	      return refnum;
	}
	
	// skipped constructor TarWriter.NewTarWriter with unsupported parameter or return types
	
	TarWriter(int refnum) { this.refnum = refnum; Seq.trackGoRef(refnum, this); }
	
	// skipped field TarWriter.TarW with unsupported type: *archive/tar.Writer
	
	/**
	 * Close closes the tar writer.
	 */
	public native void close() throws Exception;
	/**
	 * WriteNode adds a node to the archive.
	 */
	public native void writeFile(Node nd, String fpath) throws Exception;
	@Override public boolean equals(Object o) {
		if (o == null || !(o instanceof TarWriter)) {
		    return false;
		}
		TarWriter that = (TarWriter)o;
		// skipped field TarWriter.TarW with unsupported type: *archive/tar.Writer
		
		return true;
	}
	
	@Override public int hashCode() {
	    return java.util.Arrays.hashCode(new Object[] {});
	}
	
	@Override public String toString() {
		StringBuilder b = new StringBuilder();
		b.append("TarWriter").append("{");
		return b.append("}").toString();
	}
}

