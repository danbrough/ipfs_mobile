// Code generated by gobind. DO NOT EDIT.

// Java class go.kipfs.files.Files is a proxy for talking to a Go program.
//
//   autogenerated by gobind -lang=java -javapkg=go.kipfs github.com/ipfs/go-ipfs-files
//go:build  linux || windows 
//+build linux, windows 
package go.kipfs.files;

import go.Seq;

public abstract class Files {
	static {
		Seq.touch(); // for loading the native library
		_init();
	}
	
	private Files() {} // uninstantiable
	
	// touch is called from other bound packages to initialize this package
	public static void touch() {}
	
	private static native void _init();
	
	private static final class proxyDirEntry implements Seq.Proxy, DirEntry {
		private final int refnum;
		
		@Override public final int incRefnum() {
		      Seq.incGoRef(refnum, this);
		      return refnum;
		}
		
		proxyDirEntry(int refnum) { this.refnum = refnum; Seq.trackGoRef(refnum, this); }
		
		public native String name();
		public native Node node();
	}
	private static final class proxyDirIterator implements Seq.Proxy, DirIterator {
		private final int refnum;
		
		@Override public final int incRefnum() {
		      Seq.incGoRef(refnum, this);
		      return refnum;
		}
		
		proxyDirIterator(int refnum) { this.refnum = refnum; Seq.trackGoRef(refnum, this); }
		
		public native void err() throws Exception;
		public native String name();
		public native boolean next();
		public native Node node();
	}
	private static final class proxyDirectory implements Seq.Proxy, Directory {
		private final int refnum;
		
		@Override public final int incRefnum() {
		      Seq.incGoRef(refnum, this);
		      return refnum;
		}
		
		proxyDirectory(int refnum) { this.refnum = refnum; Seq.trackGoRef(refnum, this); }
		
		public native void close() throws Exception;
		public native DirIterator entries();
		public native long size() throws Exception;
	}
	private static final class proxyFile implements Seq.Proxy, File {
		private final int refnum;
		
		@Override public final int incRefnum() {
		      Seq.incGoRef(refnum, this);
		      return refnum;
		}
		
		proxyFile(int refnum) { this.refnum = refnum; Seq.trackGoRef(refnum, this); }
		
		public native void close() throws Exception;
		public native long read(byte[] p0) throws Exception;
		public native long seek(long offset, long whence) throws Exception;
		public native long size() throws Exception;
	}
	private static final class proxyFileInfo implements Seq.Proxy, FileInfo {
		private final int refnum;
		
		@Override public final int incRefnum() {
		      Seq.incGoRef(refnum, this);
		      return refnum;
		}
		
		proxyFileInfo(int refnum) { this.refnum = refnum; Seq.trackGoRef(refnum, this); }
		
		public native String absPath();
		public native void close() throws Exception;
		public native long size() throws Exception;
		// skipped method FileInfo.Stat with unsupported parameter or return types
		
	}
	private static final class proxyNode implements Seq.Proxy, Node {
		private final int refnum;
		
		@Override public final int incRefnum() {
		      Seq.incGoRef(refnum, this);
		      return refnum;
		}
		
		proxyNode(int refnum) { this.refnum = refnum; Seq.trackGoRef(refnum, this); }
		
		public native void close() throws Exception;
		public native long size() throws Exception;
	}
	
	
	public static native void setErrNotDirectory(java.lang.Exception v);
	public static native java.lang.Exception getErrNotDirectory();
	
	public static native void setErrNotReader(java.lang.Exception v);
	public static native java.lang.Exception getErrNotReader();
	
	public static native void setErrNotSupported(java.lang.Exception v);
	public static native java.lang.Exception getErrNotSupported();
	
	/**
	 * DirFromEntry calls ToDir on Node in the given entry
	 */
	public static native Directory dirFromEntry(DirEntry e);
	public static native DirEntry fileEntry(String name, Node file);
	/**
	 * FileFromEntry calls ToFile on Node in the given entry
	 */
	public static native File fileFromEntry(DirEntry e);
	public static native File newBytesFile(byte[] b);
	// skipped function NewFileFromPartReader with unsupported parameter or return types
	
	// skipped function NewFilter with unsupported parameter or return types
	
	// skipped function NewLinkFile with unsupported parameter or return types
	
	// skipped function NewMapDirectory with unsupported parameter or return types
	
	/**
	 * NewMultiFileReader constructs a MultiFileReader. `file` can be any `commands.Directory`.
	If `form` is set to true, the Content-Disposition will be &#34;form-data&#34;.
	Otherwise, it will be &#34;attachment&#34;.
	 */
	public static native MultiFileReader newMultiFileReader(Directory file, boolean form);
	// skipped function NewReaderFile with unsupported parameter or return types
	
	// skipped function NewReaderPathFile with unsupported parameter or return types
	
	// skipped function NewReaderStatFile with unsupported parameter or return types
	
	// skipped function NewSerialFile with unsupported parameter or return types
	
	// skipped function NewSerialFileWithFilter with unsupported parameter or return types
	
	// skipped function NewSliceDirectory with unsupported parameter or return types
	
	// skipped function NewTarWriter with unsupported parameter or return types
	
	// skipped function NewWebFile with unsupported parameter or return types
	
	/**
	 * ToDir is an alias for n.(Directory). If the file isn&#39;t directory, a nil value
	will be returned
	 */
	public static native Directory toDir(Node n);
	/**
	 * ToFile is an alias for n.(File). If the file isn&#39;t a regular file, nil value
	will be returned
	 */
	public static native File toFile(Node n);
	public static native Symlink toSymlink(Node n);
	// skipped function Walk with unsupported parameter or return types
	
	/**
	 * WriteTo writes the given node to the local filesystem at fpath.
	 */
	public static native void writeTo(Node nd, String fpath) throws Exception;
}
