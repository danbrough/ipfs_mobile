// Code generated by gobind. DO NOT EDIT.

// Java class go.kipfs.files.Filter is a proxy for talking to a Go program.
//
//   autogenerated by gobind -lang=java -javapkg=go.kipfs github.com/ipfs/go-ipfs-files
//go:build  linux || windows 
//+build linux, windows 
package go.kipfs.files;

import go.Seq;

/**
 * Filter represents a set of rules for determining if a file should be included or excluded.
A rule follows the syntax for patterns used in .gitgnore files for specifying untracked files.
Examples:
foo.txt
(star).app
bar/
(star)(star)/baz
fizz/(star)(star)
 */
public final class Filter implements Seq.Proxy {
	static { Files.touch(); }
	
	private final int refnum;
	
	@Override public final int incRefnum() {
	      Seq.incGoRef(refnum, this);
	      return refnum;
	}
	
	// skipped constructor Filter.NewFilter with unsupported parameter or return types
	
	Filter(int refnum) { this.refnum = refnum; Seq.trackGoRef(refnum, this); }
	
	/**
	 * IncludeHidden - Include hidden files
	 */
	public final native boolean getIncludeHidden();
	/**
	 * IncludeHidden - Include hidden files
	 */
	public final native void setIncludeHidden(boolean v);
	
	// skipped field Filter.Rules with unsupported type: *github.com/crackcomm/go-gitignore.GitIgnore
	
	// skipped method Filter.ShouldExclude with unsupported parameter or return types
	
	@Override public boolean equals(Object o) {
		if (o == null || !(o instanceof Filter)) {
		    return false;
		}
		Filter that = (Filter)o;
		boolean thisIncludeHidden = getIncludeHidden();
		boolean thatIncludeHidden = that.getIncludeHidden();
		if (thisIncludeHidden != thatIncludeHidden) {
		    return false;
		}
		// skipped field Filter.Rules with unsupported type: *github.com/crackcomm/go-gitignore.GitIgnore
		
		return true;
	}
	
	@Override public int hashCode() {
	    return java.util.Arrays.hashCode(new Object[] {getIncludeHidden()});
	}
	
	@Override public String toString() {
		StringBuilder b = new StringBuilder();
		b.append("Filter").append("{");
		b.append("IncludeHidden:").append(getIncludeHidden()).append(",");
		return b.append("}").toString();
	}
}

