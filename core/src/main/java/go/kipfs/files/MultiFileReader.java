// Code generated by gobind. DO NOT EDIT.

// Java class go.kipfs.files.MultiFileReader is a proxy for talking to a Go program.
//
//   autogenerated by gobind -lang=java -javapkg=go.kipfs github.com/ipfs/go-ipfs-files
//go:build  linux || windows 
//+build linux, windows 
package go.kipfs.files;

import go.Seq;

/**
 * MultiFileReader reads from a `commands.Node` (which can be a directory of files
or a regular file) as HTTP multipart encoded data.
 */
public final class MultiFileReader implements Seq.Proxy, go.kipfs.core.Reader {
	static { Files.touch(); }
	
	private final int refnum;
	
	@Override public final int incRefnum() {
	      Seq.incGoRef(refnum, this);
	      return refnum;
	}
	
	/**
	 * NewMultiFileReader constructs a MultiFileReader. `file` can be any `commands.Directory`.
	If `form` is set to true, the Content-Disposition will be &#34;form-data&#34;.
	Otherwise, it will be &#34;attachment&#34;.
	 */
	public MultiFileReader(Directory file, boolean form) {
		this.refnum = __NewMultiFileReader(file, form);
		Seq.trackGoRef(refnum, this);
	}
	
	private static native int __NewMultiFileReader(Directory file, boolean form);
	
	MultiFileReader(int refnum) { this.refnum = refnum; Seq.trackGoRef(refnum, this); }
	
	// skipped field MultiFileReader.Reader with unsupported type: io.Reader
	
	/**
	 * Boundary returns the boundary string to be used to separate files in the multipart data
	 */
	public native String boundary();
	public native long read(byte[] buf) throws Exception;
	@Override public boolean equals(Object o) {
		if (o == null || !(o instanceof MultiFileReader)) {
		    return false;
		}
		MultiFileReader that = (MultiFileReader)o;
		// skipped field MultiFileReader.Reader with unsupported type: io.Reader
		
		return true;
	}
	
	@Override public int hashCode() {
	    return java.util.Arrays.hashCode(new Object[] {});
	}
	
	@Override public String toString() {
		StringBuilder b = new StringBuilder();
		b.append("MultiFileReader").append("{");
		return b.append("}").toString();
	}
}

