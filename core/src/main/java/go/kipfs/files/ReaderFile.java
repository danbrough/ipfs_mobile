// Code generated by gobind. DO NOT EDIT.

// Java class go.kipfs.files.ReaderFile is a proxy for talking to a Go program.
//
//   autogenerated by gobind -lang=java -javapkg=go.kipfs github.com/ipfs/go-ipfs-files
//go:build  linux || windows 
//+build linux, windows 
package go.kipfs.files;

import go.Seq;

/**
 * ReaderFile is a implementation of File created from an `io.Reader`.
ReaderFiles are never directories, and can be read from and closed.
 */
public final class ReaderFile implements Seq.Proxy, File, FileInfo, Node, go.kipfs.core.Closer, go.kipfs.core.KReader, go.kipfs.core.ReadCloser, go.kipfs.core.Reader {
	static { Files.touch(); }
	
	private final int refnum;
	
	@Override public final int incRefnum() {
	      Seq.incGoRef(refnum, this);
	      return refnum;
	}
	
	ReaderFile(int refnum) { this.refnum = refnum; Seq.trackGoRef(refnum, this); }
	
	public ReaderFile() { this.refnum = __New(); Seq.trackGoRef(refnum, this); }
	
	private static native int __New();
	
	public native String absPath();
	public native void close() throws Exception;
	public native long read(byte[] p0) throws Exception;
	public native long seek(long offset, long whence) throws Exception;
	public native long size() throws Exception;
	// skipped method ReaderFile.Stat with unsupported parameter or return types
	
	@Override public boolean equals(Object o) {
		if (o == null || !(o instanceof ReaderFile)) {
		    return false;
		}
		ReaderFile that = (ReaderFile)o;
		return true;
	}
	
	@Override public int hashCode() {
	    return java.util.Arrays.hashCode(new Object[] {});
	}
	
	@Override public String toString() {
		StringBuilder b = new StringBuilder();
		b.append("ReaderFile").append("{");
		return b.append("}").toString();
	}
}

